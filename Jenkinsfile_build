/*****************************************************************************
 * Copyright (C) 2021, RTE (http://www.rte-france.com)
 * SPDX-License-Identifier: Apache-2.0
 * Jenkins pipeline to build SEAPATH images
 *
 * Requirements:
 * - Install Jenkins plugins: Pipeline, Pipeline Utility Steps, Throttle
 *   Concurrent Builds, extended choice and Workspace Cleanup
 * - Commands repo, git and cqfd
 * - Add your public SSH key and secure boot keys in the keys directory
 *****************************************************************************/

build_result_map = [
    flash_bios : [
        "votp/seapath-flash-bios-votp.wic.gz",
        "votp/seapath-flash-bios-votp.wic.bmap",
    ],
    flash_efi : [
        "votp/seapath-flash-efi-votp.wic.gz",
        "votp/seapath-flash-efi-votp.wic.bmap",
    ],
    flash_pxe : [
        "votp/bzImage",
        "votp/seapath-flash-pxe-votp.cpio.gz"
    ],
    guest_efi : [
        "votp-vm/seapath-guest-efi-image-votp-vm.wic.qcow2"
    ],
    guest_efi_test : [
        "votp-vm/seapath-guest-efi-test-image-votp-vm.wic.qcow2"
    ],
    guest_efi_dbg : [
        "votp-vm/seapath-guest-efi-dbg-image-votp-vm.wic.qcow2"
    ],
    host_bios : [
        "votp/seapath-host-bios-image-votp.wic.gz",
        "votp/seapath-host-bios-image-votp.wic.bmap"
    ],
    host_bios_dbg : [
        "votp/seapath-host-bios-dbg-image-votp.wic.gz",
        "votp/seapath-host-bios-dbg-image-votp.wic.bmap"
    ],
    host_bios_no_iommu : [
        "votp-no-iommu/seapath-host-bios-no-iommu-image-votp-no-iommu.wic.bmap",
        "votp-no-iommu/seapath-host-bios-no-iommu-image-votp-no-iommu.wic.gz"
    ],
    host_bios_test : [
        "votp/seapath-host-bios-test-image-votp.wic.gz",
        "votp/seapath-host-bios-test-image-votp.wic.bmap"
    ],
    host_bios_test_no_iommu : [
        "votp-no-iommu/seapath-host-bios-test-no-iommu-image-votp-no-iommu.wic.bmap",
        "votp-no-iommu/seapath-host-bios-test-no-iommu-image-votp-no-iommu.wic.gz"
    ],
    host_efi : [
        "votp/seapath-host-efi-image-votp.wic.gz",
        "votp/seapath-host-efi-image-votp.wic.bmap"
    ],
    host_efi_dbg : [
        "votp/seapath-host-efi-dbg-image-votp.wic.gz",
        "votp/seapath-host-efi-dbg-image-votp.wic.bmap"
    ],
    host_efi_test : [
        "votp/seapath-host-efi-test-image-votp.wic.gz",
        "votp/seapath-host-efi-test-image-votp.wic.bmap"
    ],
    host_efi_swu : [
        "votp/seapath-host-efi-swu-image-votp.swu"
    ],
    monitor_bios : [
        "votp-monitor/seapath-monitor-bios-image-votp-monitor.wic.gz",
        "votp-monitor/seapath-monitor-bios-image-votp-monitor.wic.bmap",
    ],
    monitor_efi : [
        "votp-monitor/seapath-monitor-efi-image-votp-monitor.wic.gz",
        "votp-monitor/seapath-monitor-efi-image-votp-monitor.wic.bmap",
    ],
    monitor_efi_swu : [
        "votp-monitor/seapath-monitor-efi-swu-image-votp-monitor.swu"
    ]
]

pipeline {
    agent any

    parameters {
        string(name: 'OUPUT_IMAGES_DIR',
               defaultValue: '/var/jenkins_home/images/',
               description: """Directory where the built images will be exported to.""")
        string(name: 'KEYS_DIR',
               defaultValue: '/var/jenkins_home/keys',
               description: """Path to the keys directory.""")
        string(name: 'HTTP_PROXY',
               defaultValue: "",
               description: "Overwrite HTTP proxy configuration"
        )
        string(name: 'NO_PROXY',
               defaultValue: "",
               description: "Overwrite no proxy configuration"
        )
        booleanParam(
            name: 'CLEAN_WORKSPACE',
            defaultValue: true,
            description: 'Clean the workspace and restart building from strach')
        extendedChoice(
            description: 'Select the images to build',
            multiSelectDelimiter: ',',
            name: 'IMAGES',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_CHECKBOX',
            value: 'flash_bios,flash_efi,flash_pxe,guest_efi,guest_efi_test,guest_efi_dbg,host_bios,host_bios_dbg,host_bios_no_iommu,host_bios_test,host_bios_test_no_iommu,host_efi,host_efi_dbg,host_efi_test,host_efi_swu,monitor_bios,monitor_efi,monitor_efi_swu',
            visibleItemCount: 100)
        extendedChoice(
            description: 'Select the container to build',
            multiSelectDelimiter: ',',
            name: 'CONTAINERS',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_CHECKBOX',
            value: 'pxe,',
            visibleItemCount: 100)
        booleanParam(
            name: 'EXPORT_SEAPATH_ANSIBLE',
            defaultValue: false,
            description: 'Export all SEAPATH Ansible files in an tar.gz archive')
    }

    // Prevent concurrent execution of jobs tagged with "seapath-build" category
    options {
        throttleJobProperty(
            categories: ['seapath-build'],
            throttleEnabled: true,
            throttleOption: 'category',
            maxConcurrentPerNode: 1,
            maxConcurrentTotal: 1)
        buildDiscarder (
            logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20'))
    }

    environment {
        YOCTO_CACHE_DIR = "/var/jenkins_home/yocto"
        BUILD_DIR = "build/tmp/deploy/images"
        SEAPATH_URI = "https://github.com/seapath"
    }

    stages {

        stage("Check parameters")  {
            steps {
                script {
                    if (!params.IMAGES && !params.CONTAINERS && !params.EXPORT_SEAPATH_ANSIBLE) {
                        error "Error nothing was selected, nothing to do!"
                    }
                }
            }
        }

        stage("Clean Workspace") {
            when {
                expression { params.CLEAN_WORKSPACE }
            }
            steps {
                cleanWs()
            }
        }
        stage("Prepare environnement")
        {
            steps {
                script {
                    env.CQFD_EXTRA_RUN_ARGS = \
                        "-v $env.YOCTO_CACHE_DIR/dl:/mnt/dl" + \
                        " -e DL_DIR=/mnt/dl" + \
                        " -v $env.YOCTO_CACHE_DIR/sstate:/mnt/sstate" + \
                        " -e SSTATE_DIR=/mnt/sstate"
                    env.CQFD_EXTRA_BUILD_ARGS = ""
                    sh """
                        mkdir -p "$YOCTO_CACHE_DIR/dl" "$YOCTO_CACHE_DIR/sstate"
                    """
                    if (params.HTTP_PROXY) {
                        http_proxy = params.HTTP_PROXY
                    }
                    else if (env.HTTP_PROXY) {
                        http_proxy = env.HTTP_PROXY
                    }
                    else if (env.HTTPS_PROXY) {
                        http_proxy = env.HTTPS_PROXY
                    }
                    else if (env.http_proxy) {
                        http_proxy = env.http_proxy
                    }
                    else if (env.https_proxy) {
                        http_proxy = env.https_proxy
                    }
                    else {
                        http_proxy = ""
                    }
                    if (params.NO_PROXY) {
                        no_proxy = params.NO_PROXY
                    }
                    else if (env.NO_PROXY) {
                        no_proxy = env.NO_PROXY
                    }
                    else if (env.no_proxy) {
                        no_proxy = env.no_proxy
                    }
                    else {
                        no_proxy = ""
                    }
                    if (http_proxy != "") {
                        echo "Use $http_proxy as proxy"
                        env.HTTP_PROXY = http_proxy
                        env.HTTPS_PROXY = http_proxy
                        env.http_proxy = http_proxy
                        env.https_proxy = http_proxy
                        env.CQFD_EXTRA_RUN_ARGS += \
                            " -e http_proxy=$http_proxy" + \
                            " -e https_proxy=$http_proxy" + \
                            " -e HTTPS_PROXY=$http_proxy" + \
                            " -e HTTP_PROXY=$http_proxy" + \
                            " -e GIT_PROXY_COMMAND=oe-git-proxy"
                        env.CQFD_EXTRA_BUILD_ARGS += \
                            " --build-arg http_proxy=$http_proxy" + \
                            " --build-arg https_proxy=$http_proxy" + \
                            " --build-arg HTTPS_PROXY=$http_proxy" + \
                            " --build-arg HTTP_PROXY=$http_proxy" + \
                            " --build-arg GIT_PROXY_COMMAND=oe-git-proxy"
                    }
                    if (no_proxy != "") {
                        echo "Exclude $no_proxy from proxy"
                        env.no_proxy = no_proxy
                        env.NO_PROXY = no_proxy
                        env.CQFD_EXTRA_RUN_ARGS += \
                            " -e no_proxy=$no_proxy" + \
                            " -e NO_PROXY=$no_proxy"
                        env.CQFD_EXTRA_BUILD_ARGS += \
                            " --build-arg no_proxy=$no_proxy" + \
                            " --build-arg NO_PROXY=$no_proxy"
                    }
                    sh "mkdir -p -v $params.OUPUT_IMAGES_DIR"
                }
            }
        }
        stage("Fetch Sources") {
            when {
                expression { params.CLEAN_WORKSPACE && params.IMAGES }
            }
            steps {
                sh """
                    repo init -u "$SEAPATH_URI/repo-manifest.git"
                    repo sync
                    cqfd init
                """
            }
        }
        stage("Import keys") {
            when {
                expression { params.IMAGES }
            }
            steps {
                sh """
                    if [ -e keys ] ; then
                        rm -rf keys
                    fi
                    cp -frv "$params.KEYS_DIR"/ keys
                """
            }
        }

        stage ("Build Images") {
            when {
                expression { params.IMAGES }
            }
            steps {
                script {
                    images = params.IMAGES.split(",")
                    for (image in images) {
                        echo("Build " + image)
                        sh """
                            cqfd -b $image
                        """
                        for (file in build_result_map[image]) {
                            sh """
                                cp -fv "$BUILD_DIR"/"$file" "$params.OUPUT_IMAGES_DIR"/
                            """
                        }
                    }
                }
            }
        }
        stage ("Build Containers") {
            when {
                expression { params.CONTAINERS }
            }
            steps {
                script {
                    containers = params.CONTAINERS.split(",")
                    for (container in containers) {
                        echo "Generate ${container}"
                        sh """
                            docker build $CQFD_EXTRA_BUILD_ARGS $SEAPATH_URI/'containers.git#:'$container --tag seapath-$container
                            docker save seapath-$container -o "$params.OUPUT_IMAGES_DIR/${container}.tar"
                        """
                    }
                }
            }
        }
        stage ("Export SEAPATH Ansible files") {
            when {
                expression { params.EXPORT_SEAPATH_ANSIBLE }
            }
            steps {
                sh """
                    if [ -e ansible ] ; then
                        rm -rf ansible
                    fi
                    mkdir ansible
                """
                dir('ansible') {
                    git changelog: false, poll: false, url: 'https://github.com/seapath/ansible/'
                    sh """
                        ./prepare.sh
                        tar -czf "$OUPUT_IMAGES_DIR/ansible.tar.gz" \
                            --exclude-vcs \
                            ansible.cfg \
                            ceph-ansible/ \
                            collections/ \
                            inventories/ \
                            library/ \
                            LICENSE \
                            playbooks/ \
                            roles/ \
                            scripts/ \
                            src/ \
                            templates/ \
                            vars/
                    """
                }
            }
        }
    }
}

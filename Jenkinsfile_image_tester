/************************************************************************************
 * Jenkins pipeline that flashes, configures, tests and deploys VMs on a SEAPATH machines.
 ***********************************************************************************/

def p // Global variable to handle properties

def imgs_pxe = [
    "bzImage",
    "seapath-flash.cpio.gz"]
def imgs_monitor = [
    "seapath-monitor-image.wic.bmap",
    "seapath-monitor-image.wic.gz"]

def imgs_regular = [
    "seapath-host1-image.wic.bmap",
    "seapath-host1-image.wic.gz",
    "seapath-host2-image.wic.bmap",
    "seapath-host2-image.wic.gz",
    ]

def imgs_tests = [
    "seapath-host1-test-image.wic.bmap",
    "seapath-host1-test-image.wic.gz",
    "seapath-host2-test-image.wic.bmap",
    "seapath-host2-test-image.wic.gz",
    ]

def img_guest = ["seapath-guest-efi-image-votp-guest.wic.qcow2"]
def img_guest_test = ["seapath-guest-efi-test-image-votp-guest.wic.qcow2"]

pipeline {
    agent any

    // Prevent concurrent execution of jobs tagged with "cluster" category
    options {
        throttleJobProperty(
            categories: ['cluster'],
            throttleEnabled: true,
            throttleOption: 'category',
            maxConcurrentPerNode: 1,
            maxConcurrentTotal: 1)
        buildDiscarder (
            logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20'))
    }

    // TODO: Add gitlab server fingerprints to known_hosts instead
    environment {
        TMP_FILE = ".all_latencies"
    }

    parameters {
        string(name: 'IMAGES_DIR',
               defaultValue: '/var/jenkins_home/images/',
               description: """Directory where built images are located. \
Please create and use a subdirectory inside /var/jenkins_home/images with the \
following files:
- bzImage
- seapath-flash.cpio.gz
- seapath-host1-image.wic.bmap
- seapath-host1-image.wic.gz
- seapath-host2-image.wic.bmap
- seapath-host2-image.wic.gz
- seapath-host1-test-image.wic.bmap
- seapath-host1-test-image.wic.gz
- seapath-host2-test-image.wic.bmap
- seapath-host2-test-image.wic.gz
- seapath-monitor-image.wic.bmap
- seapath-monitor-image.wic.gz
- seapath-guest-efi-image.wic.qcow2
- seapath-guest-efi-test-image.wic.qcow2
- seapath-pxe.tar
- ansible.tar.gz

Note:
- images need to be built with the 'cluster' ansible SSH public key \
(https://r1.sfl.team/attachments/3416).
- tests images are required only in ci_rt_test and no IOMMU only in custom
               """)
        string(
            name: 'MAX_LATENCY',
            defaultValue: '200',
            description: 'Maximal latency to reach (us)'
            )

        choice(
            name: 'TYPE',
            choices: ['ci', 'ci_rt_test', 'custom'],
            description: '''Select the pipeline type:
 - ci: pipeline with CI test and VMs
 - ci_rt_test: like ci with real time tests (Warning: long and invasive tests)
 - custom: Generate a custom environment using a custom inventories'''
        )
        string (
            name: 'inventories',
            description: 'inventories list (comma separated).'
        )
        string (
            name: 'VMs_directory',
            description: 'Change the directory where the VMs are stored. Work only if TYPE is custom.'
        )
        booleanParam(
            name: 'NO_DPDK',
            defaultValue: false,
            description: 'Use OVS without DPDK'
            )

    }

    stages {

        stage("Check requirements") {
            steps {
                script {
                    if (!params.inventories) {
                        error "Error inventories must be set"
                    }
                    def imgCheck = true
                    def imgs = imgs_monitor
                    if (params.TYPE == "ci_rt_test") {
                        imgs += imgs_tests
                        imgs += img_guest_test
                    } else {
                        imgs += imgs_regular
                        imgs += img_guest
                    }
                    imgs += [ "seapath-pxe.tar", "ansible.tar.gz" ]
                    imgs.each { item ->
                        if (!fileExists("${IMAGES_DIR}/${item}")) {
                            echo "Could not find ${item}"
                            imgCheck = false
                        }
                    }
                        if (!imgCheck) {
                        error "Could not find all required files, please check ${IMAGES_DIR}"
                    }
                }
            }
        }
        stage("Prepare Workspace") {
            steps {
                cleanWs()
                script {
                    echo "copying PXE images to root directory"
                    sh """
                        mkdir pxe_images
                        cp "${IMAGES_DIR}"/${imgs_pxe[0]} pxe_images/
                        cp "${IMAGES_DIR}"/${imgs_pxe[1]} pxe_images/seapath-flash-pxe-votp-flash.cpio.gz
                        """
                    echo "Import SEAPATH ansible files"
                    sh """
                        tar xzf "${IMAGES_DIR}/ansible.tar.gz"
                    """
                    env.ANSIBLE_INVENTORY = params.inventories
                    echo "Use Ansible inventory: $ANSIBLE_INVENTORY"
                }
            }
        }

        stage("Prepare Containers") {
            steps {
                    echo "Stop containers"
                    sh """
                        if docker ps |grep -q seapath_flash_pxe ; then
                            docker stop seapath_flash_pxe
                        fi
                        if docker ps |grep -q seapath_vms_dhcp ; then
                            docker stop seapath_vms_dhcp
                        fi
                    """
                    echo "Import PXE/DHCP images"
                    sh """
                        docker load -i "${IMAGES_DIR}/seapath-pxe.tar"
                    """
            }
        }

        stage("Boot from PXE") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh "ansible-playbook playbooks/ci_boot_machine_from_pxe.yaml"
                    }
                }
            }
        }

        stage ("Flash Images") {
            steps {
                script {
                    if (params.TYPE == "ci_rt_test") {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                ansible-playbook \
                                --extra-vars image_path="${IMAGES_DIR}/${imgs_tests[1]}" \
                                --limit "pxe_hypervisor1" \
                                playbooks/ci_flash_disk.yaml
                            """
                            sh """
                                ansible-playbook \
                                --extra-vars image_path="${IMAGES_DIR}/${imgs_tests[3]}" \
                                --limit "pxe_hypervisor2" \
                                playbooks/ci_flash_disk.yaml
                            """
                        }
                    }else{
                        sshagent(credentials : ['cluster']) {
                            sh """
                                ansible-playbook \
                                --extra-vars image_path="${IMAGES_DIR}/${imgs_regular[1]}" \
                                --limit "pxe_hypervisor1" \
                                playbooks/ci_flash_disk.yaml
                            """
                            sh """
                                ansible-playbook \
                                --extra-vars image_path="${IMAGES_DIR}/${imgs_regular[3]}" \
                                --limit "pxe_hypervisor2" \
                                playbooks/ci_flash_disk.yaml
                            """
                        }
                    }
                    sh """
                        ansible-playbook \
                        --extra-vars image_path="${IMAGES_DIR}/${imgs_monitor[1]}" \
                        --limit "pxe_observer" \
                        playbooks/ci_flash_disk.yaml
                    """
                }
            }
        }

        stage("Configure Hosts") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh "ansible-playbook playbooks/ci_configure_hosts.yaml"
                    }
                }
            }
        }

        stage("Test machines") {
            steps {
                script {
                    echo "Test Common"
                    sshagent(credentials : ['cluster']) {
                        sh "ansible-playbook playbooks/ci_common_tests.yaml"
                    }
                    junit "playbooks/common/*/cukinia_common.xml"
                    echo "Test Hypervisors"
                    sshagent(credentials : ['cluster']) {
                        sh "ansible-playbook playbooks/ci_hypervisor_tests.yaml"
                    }
                    junit "playbooks/hypervisor/*/cukinia_hypervisor.xml"
                    if (params.TYPE != "custom") {
                        echo "Test openvswitch"
                        sshagent(credentials : ['cluster']) {
                            sh "ansible-playbook playbooks/ci_ovs_tests.yaml"
                        }
                    }
                }
            }
        }

        stage("Configure Cluster") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh "ansible-playbook playbooks/ci_configure_cluster.yaml"
                    }
                }
            }
        }

        stage("Test Cluster") {
            steps {
                script {
                    sshagent(credentials : ['cluster']) {
                        sh "ansible-playbook playbooks/ci_cluster_tests.yaml"
                        junit "playbooks/cluster/cukinia_cluster.xml"
                    }
                }
            }
        }

        stage("Prepare VM environment") {
            when { 
                 expression { params.TYPE != "custom" }
            }
            steps {
                sh "ansible-playbook playbooks/ci_enable_vms_dhcp.yaml"
            }
        }

        stage("Deploy VM") {
            steps {
                script {
                    if (params.NO_DPDK) {
                        env.guest_template = env.WORKSPACE + \
                            "/templates/vm/votp_vm_rt_isolated.xml.j2"
                    } else {
                        env.guest_template = env.WORKSPACE + \
                            "/templates/vm/votp_vm_dpdk_isolated.xml.j2"
                    }
                    if (params.TYPE == "ci_rt_test") {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                ansible-playbook \
                                --extra-vars image_directory="${IMAGES_DIR}" \
                                --extra-vars guest_image="${img_guest_test[0]}" \
                                --extra-vars vm_config="${guest_template}" \
                                playbooks/ci_deploy_vms.yaml

                                # Verify correct deployment
                                ansible-playbook playbooks/ci_test_vm_status.yaml
                            """
                        }
                    } else if (params.TYPE == "custom") {
                        sshagent(credentials : ['cluster']) {
                            if (params.VMs_directory)
                            {
                                sh """
                                    ansible-playbook \
                                    playbooks/cluster_setup_deploy_vms.yaml \
                                    --extra-vars vms_disks_directory=${VMs_directory}/disks \
                                    --extra-vars vms_disks_directory=${vms_config_directory}/configs
                                """
                            }
                            else
                            {
                                sh """
                                    ansible-playbook \
                                    playbooks/cluster_setup_deploy_vms.yaml
                                """
                            }
                       }
                    } else {
                        sshagent(credentials : ['cluster']) {
                            sh """
                                ansible-playbook \
                                --extra-vars image_directory="${IMAGES_DIR}" \
                                --extra-vars guest_image="${img_guest[0]}" \
                                --extra-vars vm_config="${guest_template}" \
                                playbooks/ci_deploy_vms.yaml

                                # Verify correct deployment
                                ansible-playbook playbooks/ci_test_vm_status.yaml
                            """
                        }
                    }
                }
            }
        }

        stage("Configure VM") {
            when { 
                 expression { params.TYPE != "custom" }
            }
            steps {
                sshagent(credentials : ['cluster']) {
                    sh "ansible-playbook playbooks/ci_configure_vm.yaml"
                }
            }
        }

        stage("Test VM") {
            steps {
                script {
                    if (params.TYPE != "custom") {
                        sshagent(credentials : ['cluster']) {
                            sh "ansible-playbook playbooks/ci_vm_tests.yaml"
                        }
                        junit "playbooks/vm/*/cukinia_vm.xml"

                        if (params.TYPE == "ci_rt_test") {
                            sshagent(credentials : ['cluster']) {
                                sh "ansible-playbook playbooks/ci_realtime_tests.yaml"
                            }
                            junit "playbooks/realtime/*/cukinia_realtime.xml"

                            max_found = sh(
                                script: """
                                    [ -f \$TMP_FILE ] && rm \$TMP_FILE && touch \$TMP_FILE
                                    base_dir="playbooks/realtime"
                                    for file in `find \$base_dir -name output`; do
                                        max=`grep "Max Latencies" \$file \
                                            | tr " " "\n" | sort -n | tail -1 | sed s/^0*//)`
                                        echo \$max >> \$TMP_FILE
                                    done
                                    echo `sort -n -r \$TMP_FILE | head -n 1`
                                    """, returnStdout: true
                                    ).trim()

                            currentBuild.description = "Max latency: " + max_found.toString()
                            archiveArtifacts artifacts: "${TMP_FILE}"
                            archiveArtifacts artifacts: "playbooks/realtime/*/output"
                            if (max_found.toInteger() > MAX_LATENCY.toInteger()) {
                                error "Maximal latency reached"
                            }
                        }
                    }
                    sshagent(credentials : ['VMs']) {
                        sh "ansible-playbook playbooks/ci_custom_vms_tests.yaml"
                        if(fileExists("playbooks/vm_custom")) {
                            junit "playbooks/vm_custom/*/cukinia_vms_custom_tests.xml"
                        }
                    }
                }
            }
        }
        stage("Stop VMs DHCP") {
            when { 
                 expression { params.TYPE != "custom" }
            }
            steps {
                sh """
                    if docker ps |grep -q seapath_vms_dhcp ; then
                        docker stop seapath_vms_dhcp
                    fi
                """
            }
        }
    }
    post {
        failure {
            echo "Force stopping containers"
            sh """
                if docker ps |grep -q seapath_flash_pxe ; then
                    docker stop seapath_flash_pxe
                fi
                if docker ps |grep -q seapath_vms_dhcp ; then
                    docker stop seapath_vms_dhcp
                fi
            """
        }
    }
}
